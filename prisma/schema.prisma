// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  name                String
  email               String       @unique
  password            String
  gender              Gender
  profileImage        String
  bloodType           String
  location            String
  division            String
  address             String
  availability        Boolean
  isAccountActive     Boolean      @default(true)
  role                UserRole
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  userProfile         UserProfile?
  requestsAsDonor     Request[]    @relation("RequestsAsDonor")
  requestsAsRequester Request[]    @relation("RequestsAsRequester")

  @@map("user")
}

model Request {
  id                        String        @id @default(uuid())
  donorId                   String
  requesterId               String
  requesterName             String
  requesterEmail            String
  requesterAge              Int
  requesterPhoneNumber      String
  requesterLastDonationDate String
  requesterLocation         String
  requesterDivision         String
  requesterAddress          String
  isTermsAgreed             Boolean
  hospitalName              String
  dateOfDonation            String
  hospitalAddress           String
  reason                    String
  requestStatus             RequestStatus @default(PENDING)
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt

  donor     User @relation("RequestsAsDonor", fields: [donorId], references: [id])
  requester User @relation("RequestsAsRequester", fields: [requesterId], references: [id])

  @@map("request")
}

model UserProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  bio              String
  phoneNumber      String
  age              Int
  lastDonationDate String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@map("userProfile")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum Gender {
  male
  female
}
